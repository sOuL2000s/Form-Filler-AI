// Hardcoded Gemini API Key (as per your request)
const GEMINI_API_KEY = "AIzaSyCzx6ReMk8ohPJcCjGwHHzu7SvFccJqAbA";
const GEMINI_MODEL = "gemini-2.5-flash-preview-05-20";

chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    if (request.action === 'processFormWithAI') {
        processFormWithAI(request.fields, request.requirements)
            .then(response => sendResponse(response))
            .catch(error => {
                console.error('Error in background.js:', error);
                sendResponse({ success: false, message: `AI processing error: ${error.message}` });
            });
        return true; // Keep the message channel open for async response
    }
});

async function processFormWithAI(fields, requirements) {
    const prompt = `
    You are an AI assistant specialized in filling out web forms.
    I will provide you with a list of form fields (name, id, type, label, placeholder) and user requirements.
    Your task is to generate appropriate values for each field based on its context and the user's requirements.

    Respond ONLY with a JSON object where keys are the 'id' of the field (if available, otherwise 'name') and values are the suggested fill values.
    If a field has neither 'id' nor 'name', you can omit it.
    If you cannot determine a value for a field, omit it from the JSON.
    For 'select' fields, try to provide a value that matches one of its options or a common value.
    For 'radio' buttons, provide the 'value' attribute of the radio option that should be selected.
    For 'checkboxes', provide 'true' or 'false'.

    Example JSON response:
    {
        "firstName": "John",
        "lastName": "Doe",
        "email": "john.doe@example.com",
        "age": "30",
        "country": "USA",
        "subscribeNewsletter": "true"
    }

    Here are the form fields:
    ${JSON.stringify(fields, null, 2)}

    Here are the user's requirements:
    "${requirements}"

    Please generate the JSON object:
    `;

    try {
        const response = await fetch(
            `https://generativelanguage.googleapis.com/v1beta/models/${GEMINI_MODEL}:generateContent?key=${GEMINI_API_KEY}`,
            {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    contents: [{
                        parts: [{ text: prompt }]
                    }]
                }),
            }
        );

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Gemini API error: ${response.status} - ${errorData.error.message || 'Unknown error'}`);
        }

        const data = await response.json();
        const generatedText = data.candidates[0]?.content?.parts[0]?.text;

        if (!generatedText) {
            throw new Error('No text generated by Gemini API.');
        }

        // Attempt to parse the generated text as JSON
        let filledValues;
        try {
            // Gemini might sometimes wrap JSON in markdown code blocks
            const jsonMatch = generatedText.match(/```json\n([\s\S]*?)\n```/);
            if (jsonMatch && jsonMatch[1]) {
                filledValues = JSON.parse(jsonMatch[1]);
            } else {
                filledValues = JSON.parse(generatedText);
            }
        } catch (jsonError) {
            console.error('Failed to parse AI response as JSON:', jsonError, 'Raw AI response:', generatedText);
            throw new Error('AI response was not valid JSON. Please try refining your requirements.');
        }

        return { success: true, filledValues: filledValues };

    } catch (error) {
        console.error('Error calling Gemini API:', error);
        return { success: false, message: `Failed to get AI suggestions: ${error.message}` };
    }
}
